!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.$=t():e.$=t()}(self,(()=>(()=>{"use strict";var e={d:(t,o)=>{for(var s in o)e.o(o,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:o[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>i});const o=class{constructor(e){this.toolKit=e,this.info=null,this.accessToken=null}setCred(e){if(!("string"==typeof e.clientId||e.clientId instanceof String))throw new Error("params.clientId is invalid value. You must set String value.");if("string"!=typeof e.redirectUrl)throw new Error("params.redirectUrl is invalid value. You must set string value which is an URL.");if("string"!=typeof e.scope)throw new Error("params.scope is invalid value. You must set string value which is a URL in scopes. A list of scopes is in https://cloud.google.com/storage/docs/authentication.");if(!this.toolKit.detectURL(e.redirectUrl))throw new Error("params.redirectUrl is invalid value. You must set string value which is an URL.");if(!this.#e(e.scope))throw new Error("params.scope is invalid value. You must set string value which is a URL in scopes. A list of scopes is in https://cloud.google.com/storage/docs/authentication.");this.info=e}#e(e){if("string"!=typeof e)throw Error("You must input string type argument.");return["https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/devstorage.read_write","https://www.googleapis.com/auth/devstorage.full_control","https://www.googleapis.com/auth/cloud-platform.read-only","https://www.googleapis.com/auth/cloud-platform"].includes(e)}oauthSignIn(){const e=document.createElement("form");e.setAttribute("method","GET"),e.setAttribute("action","https://accounts.google.com/o/oauth2/v2/auth");const t={client_id:this.info.clientId,redirect_uri:this.info.redirectUrl,response_type:"token",scope:this.info.scope,include_granted_scopes:"true",state:"pass-through value"};for(let o in t){const s=document.createElement("input");s.setAttribute("type","hidden"),s.setAttribute("name",o),s.setAttribute("value",t[o]),e.appendChild(s)}document.body.appendChild(e),e.submit()}uploadFiles(e,t,o,s=null){const i=s||this.accessToken;if(!i)throw Error("The access token is not set.");if("FileList"!=Object.prototype.toString.call(e).split(" ")[1].slice(0,-1))throw Error("fileList type is invalid. It must be FileList.");for(let s of e){const e=new FileReader;e.addEventListener("load",{bucketName:t,file:s,callback:o,token:i,handleEvent:this.uploadFile}),e.readAsArrayBuffer(s)}return 0}async uploadFile(e){const t=new RegExp("^(?=.*(=|&|/|\\?)).*$");if(this.file)if(t.test(this.file.name))this.callback("The file must not include '=', '&', '?' and '/'.",this.file.name);else if(this.token)if(this.bucketName)if(e&&e.target&&e.target.result){const t=e.target.result,o=`https://storage.googleapis.com/upload/storage/v1/b/${this.bucketName}/o`,s=`?uploadType=media&name=${this.file.name}`,i=await fetch(o+s,{method:"POST",headers:{"Content-Type":this.file.type,Authorization:`Bearer ${this.token}`},body:t});200!=i.status?this.callback("404 Error occurred by fetch.",this.file.name):(await i.json()).mediaLink?this.callback(null,this.file.name):this.callback("No mediaLink",this.file.name)}else this.callback("The argument is empty or the event does not include 'event.target.result.'",this.file.name);else this.callback("bucketName is not binded. Please set bucketName.",this.file.name);else this.callback("token is not set. Please bind token",this.file.name);else this.callback("file is not set. Please bind file.",null)}getAccessToken(e){if("object"!=typeof e)throw Error("You must input location which is Object.");if(!e)throw Error("The argument is null.You must input location which is Object, not null.");if(!e.hash)return{token:null,message:"This location has no access token info."};for(let t of e.hash.split("&"))if(0===t.indexOf("access_token=")){const e=t.split("=")[1];return this.accessToken=e,{token:e}}return{token:null,message:"This location has no access token info."}}},s=class{detectURL(e){return!!(/^https?:\/\/localhost:[0-9]*/.exec(e)||/^https:\/\/[\w/:%#\$&\?\(\)~\.=\+\-]+\.[a-z]+/.exec(e)||/^https?:\/\/localhost$/.exec(e)||/^https?:\/\/localhost\/[a-zA-Z/:%#\$&\?\(\)~\.=\+\-]*/.exec(e))}},i=class{constructor(e="GCS"){if(this.name=e,console.log("make Clam instance mode is "+e),"GCS"!==e)throw Error("The second argument is invalid. You can set only 'GCS'. It means that you use Google Cloud Storage.");this.module=new o(new s)}setCred=e=>{if(!e)throw Error("You must set the first argument.");if(!(e.clientId&&e.redirectUrl&&e.scope))throw Error("The first argument is invalid. You must set 'clientId', 'redirectUrl' and 'scope'.");try{this.module.setCred(e)}catch(e){throw e}};toAuthPage=()=>{if(console.log("Auth"),!this.module)throw Error("This instance is not initialzed.");this.module.oauthSignIn()};getAuthInfo=()=>{if(console.log("Auth info + "+this.name),!this.module)throw Error("This instance is not initialzed.");if("GCS"===this.name)return this.module.getAccessToken(location)};uploadFiles=async(e,t,o)=>{if(console.log("Uplad"),!this.module)throw Error("This instance is not initialzed.");return this.module.uploadFiles(e,t,o)}};return t})()));